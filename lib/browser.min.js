var Sa = (function (exports) {
	'use strict';

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var SaUniqueId_browser = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.SaUniqueId = void 0;
	/**
	 * @class SaUniqueId (browser)
	 * @description
	 * Implements id() method that returns a unique id that is 13 chars long
	 */
	exports.SaUniqueId = class {
	    static id() {
	        let ms = '' + new Date().getTime();
	        if (ms.length < 13) {
	            ms = ms.padEnd(13, '0');
	        }
	        let str = '';
	        if (typeof window !== 'undefined' &&
	            window.crypto &&
	            window.crypto.getRandomValues) {
	            const array = new Uint32Array(1);
	            window.crypto.getRandomValues(array);
	            str = array[0].toString();
	        }
	        else {
	            // throw error
	            throw Error('Browser does not support window.crypto.getRandomValues');
	        }
	        if (str.length < 10) {
	            str = str.padStart(10, '0');
	        }
	        return `${ms}${str}`;
	    }
	};
	});

	var SaUniqueId_browser$1 = unwrapExports(SaUniqueId_browser);
	var SaUniqueId_browser_1 = SaUniqueId_browser.SaUniqueId;

	exports.SaUniqueId = SaUniqueId_browser_1;
	exports.default = SaUniqueId_browser$1;

	return exports;

}({}));
